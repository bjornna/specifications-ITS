## EHR_STATUS [/ehr/{ehr_id}/ehr_status]

Release: **_Release_**

Management of EHR_STATUSes.

### Get EHR_STATUS version by time [GET /ehr/{ehr_id}/ehr_status{?version_at_time}]

Retrieve the `EHR_STATUS` associated with the EHR specified by `ehr_id`.
When the `version_at_time` parameter is provided, the `EHR_STATUS` version that existed at the specified time is returned,
otherwise the latest trunk version is returned.

+ Parameters
    + ehr_id (string) - EHR identifier
    + version_at_time (string, optional) - A timestamp in the extended ISO8601 format

+ Response 200 (application/json)
    `200 OK` is return with the EHR_STATUS resource in the body when it is successfully retrieved. 

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/ehr_status/{version_uid}
            ETag: {version_uid}

    + Body

            {
              "uid": "...",                                /* LOCATABLE */
              "archetype_node_id": "",                     /* LOCATABLE */
              "name": "",                                  /* LOCATABLE */
              "archetype_details": {                       /* LOCATABLE */
                "archetype_id": "...",
                "rm_version": "1.0.3",
              },
              "subject": {
                "external_ref": {
                  "namespace": "DEMOGRAPHIC",
                  "type": "PERSON",
                  "id": {
                    "_type": "HIER_OBJECT_ID",
                    "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                  }
                }
              }
              "is_queryable": true,
              "is_modifiable": true,
              "other_details": {                           /* optional, ITEM_STRUCTURE, archetypable */
                "_type": "ITEM_TREE",
                "items": {
                  ...
                }
              }
            }


+ Response 400

    `400 Bad Request` is returned when the request has invalid content such as an invalid `version_at_time` format.
    
    + Body
    
+ Response 404

    `404 Not Found` returned when `EHR` with `ehr_id` does not exist or
    a version of an `EHR_STATUS` resource does not exist at the specified `version_at_time`.

    + Body

### Get EHR_STATUS by version id [GET /ehr/{ehr_id}/ehr_status/{version_uid}]

Retrieve the version of the `EHR_STATUS` associated with the specified `ehr_id` and `version_uid`.

+ Parameters
    + ehr_id (string) - EHR identifier
    + version_uid (string) - version UID

+ Response 200 (application/json)
    `200 OK` is return when the `EHR_STATUS` is successfully retrieved.

    + Body

            {
              "uid": "...",                                /* LOCATABLE */
              "archetype_node_id": "",                     /* LOCATABLE */
              "name": "",                                  /* LOCATABLE */
              "archetype_details": {                       /* LOCATABLE */
                "archetype_id": "...",
                "rm_version": "1.0.3",
              },
              "subject": {
                "external_ref": {
                  "namespace": "DEMOGRAPHIC",
                  "type": "PERSON",
                  "id": {
                    "_type": "HIER_OBJECT_ID",
                    "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                  }
                }
              }
              "is_queryable": true,
              "is_modifiable": true,
              "other_details": {                           /* optional, ITEM_STRUCTURE, archetypable */
                "_type": "ITEM_TREE",
                "items": {
                  ...
                }
              }
            }


+ Response 404

    `404 Not Found` is returned when an `EHR` with `ehr_id` does not exist or
    an `EHR_STATUS` with `version_uid` does not exist.

    + Body

### Update EHR_STATUS [PUT /ehr/{ehr_id}/ehr_status]

Update `EHR_STATUS` associated with the specified `ehr_id`.
The existing latest `version_uid` of `EHR_STATUS` resource must be specified in the `If-Match` header.
The response will contain the updated `EHR_STATUS` resource when the `Prefer` header has a value of `return=representation`

+ Parameters
    + ehr_id (string) - EHR identifier

+ Request (application/json)

    + Header

            If-Match: {preceding_version_uid}
            Prefer: return={representation|minimal}

    + Body

            {
              "uid": "...",                                  /* LOCATABLE */
              "archetype_node_id": "",                       /* LOCATABLE */
              "name": "",                                    /* LOCATABLE */
              "archetype_details": {                         /* LOCATABLE */
                "archetype_id": "...",
                "rm_version": "1.0.3",
              },
              "subject": {
                "external_ref": {
                  "namespace": "DEMOGRAPHIC",
                  "type": "PERSON",
                  "id": {
                    "_type": "HIER_OBJECT_ID",
                    "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                  }
                }
              }
              "is_queryable": true,
              "is_modifiable": true,
              "other_details": {                             /* optional, ITEM_STRUCTURE, archetypable */
                "_type": "ITEM_TREE",
                "items": {
                  ...
                }
              }
            }

+ Response 200

    `200 OK` return when `EHR_STATUS` resource is successfully updated. 
    The updated `EHR_STATUS` resource is returned in the body when `Prefer` header value is `return=representation`.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/ehr_status/{version_uid}
            ETag: {version_uid}

    + Body

            {
              "uid": "...",                                  /* LOCATABLE */
              "archetype_node_id": "",                       /* LOCATABLE */
              "name": "",                                    /* LOCATABLE */
              "archetype_details": {                         /* LOCATABLE */
                "archetype_id": "...",
                "rm_version": "1.0.3",
              },
              "subject": {
                "external_ref": {
                  "namespace": "DEMOGRAPHIC",
                  "type": "PERSON",
                  "id": {
                    "_type": "HIER_OBJECT_ID",
                    "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                  }
                }
              }
              "is_queryable": true,
              "is_modifiable": true,
              "other_details": {                             /* optional, ITEM_STRUCTURE, archetypable */
                "_type": "ITEM_TREE",
                "items": {
                  ...
                }
              }
            }

+ Response 204

    `204 No Content` is returned when `Prefer` header is missing or is set to `return=minimal`.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/ehr_status/{version_uid}
            ETag: {version_uid}

+ Response 400
    `400 Bad Request` is returned when the request has invalid content.
    
    + Body
    
+ Response 404

    `404 Not Found` is returned when EHR with ehr_id does not exist.

    + Body

+ Response 412

    `412 Precondition Failed` is returned when `If-Match` header doesn't match the latest trunk version.
    Returns latest trunk version in the `Location` and `ETag` headers.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/ehr_status/{version_uid}
            ETag: {version_uid}

    + Body


## VERSIONED_EHR_STATUS [/ehr/{ehr_id}/versioned_ehr_status]
Management of VERSIONED_EHR_STATUSes.


### Get versioned EHR_STATUS [GET /ehr/{ehr_id}/versioned_ehr_status]

Retrieve `VERSIONED_EHR_STATUS` associated with an EHR specified by `ehr_id` including its `revision_history`.

+ Parameters

    + ehr_id (string) - EHR identifier

+ Response 200 (application/json)
    `200 OK` is return when the requested EHR's `VERSIONED_EHR_STATUS` is successfully retrieved.

    + Body

            {
               "uid": "_a_valid_uid_",                     /* UUID or OID, UUID preferred */
               "owner_id": "{ehr_id}",
               "time_created": "DV_DATE_TIME",             /* ISO8601 YYYY-MM-DDThh:mm:ss.SSS(Z|[+-]hh:mm) e.g. 2017-08-01T01:06:46.000+00:00 */
               "revision_history": {
                 "items": [
                   {
                     "version_id": "OBJECT_VERSION_ID",    /* object_id::creating_system_id::version_tree_id */
                     "audits": [
                       {
                         "system_id": "String",
                         "time_committed": "DV_DATE_TIME",
                         "change_type": {
                           "value": "String",              /* value from openehr terminology, change_type http://openehr.org/releases/1.0.2/architecture/terminology.pdf */
                           "defining_code": {
                             "terminology_id": {
                               "value": "openehr"
                             },
                             "code_string": "String"
                           }
                         },
                         "description": {
                           "value": "String"
                         }
                       },
                       {...},
                       {...}
                     ]
                   },
                   {...},
                   {...}
                 ]
               }
            }
                  

+ Response 404

    `404 Not Found` is returned when an `EHR` with `ehr_id` does not exist.

    + Body


### Get versioned EHR_STATUS version by time [GET /ehr/{ehr_id}/versioned_ehr_status/version{?version_at_time}]

Retrieve the `VERSION` of an `EHR_STATUS` associated with the specified `ehr_id` at `version_at_time`.
When the `version_at_time` parameter is provided, the `VERSION` that existed at the specified version time is returned,
otherwise the latest trunk version is returned. 

+ Parameters

    + ehr_id (string) - EHR identifier
    + version_at_time (string, optional) - version time specifier

+ Response 200 (application/json)
    `200 OK` is return when the requested `VERSION` is successfully retrieved, which is provided in the body.

    + Headers

            Location: {baseUrl}/ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}

    + Body

            {
              "_type": "ORIGINAL_VERSION",
              "uid": "OBJECT_VERSION_ID",                  /* _ehr_status_uid_::_system_id_::1 _system_id_ is the ID of the system from which the EHR was created */
              "contribution": "OBJECT_REF",
              "signature": "String",                       /* optional */
              "data": {
                "_type": "EHR_STATUS",
                "subject": {
                  "external_ref": {
                    "namespace": "DEMOGRAPHIC",
                    "type": "PERSON",
                    "id": {
                      "_type": "HIER_OBJECT_ID",
                      "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                    }
                  }
                }
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {                         /* optional, ITEM_STRUCTURE, archetypable */
                  "_type": "ITEM_TREE",
                  "items": {
                    ...
                  }
                }
              },
              "commit_audit": {                            /* the time committed attribute is set by the server */
                "system_id": "_a_string_id_",              /* same as the container version.uid.system_id */
                "change_type": {
                  "value": "creation",
                  "terminology_id": {
                    "value": "openehr"
                  },
                  "code_string": "249"
                },
                "description": "optional description"
              },
              "attestations": [
                {
                  "system_id": "String",
                  "time_committed": "DV_DATE_TIME",
                  "description": "String"                  /* optional */
                  "reason": "DV_TEXT",
                  "proof": "String",                       /* optional */
                  "is_pending": "Boolean"
                },
                {...},
                {...}
              ]
            }

+ Response 400

    `400 Bad Request` is returned when the request is invalid such as an invalid `version_at_time` value.

    + Body

+ Response 404

    `404 Not Found` is returned when `EHR` with `ehr_id` does not exist or
    when `EHR_STATUS` does not exist at the specified `version_at_time`.

    + Body


### Get versioned EHR_STATUS version by id [GET /ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}]
Retrieve `VERSION` of an `EHR_STATUS` associated with the specified `ehr_id` and `version_uid`.

+ Parameters

    + ehr_id (string) - EHR identifier
    + version_uid (string) - version uid

+ Response 200 (application/json)
    `200 OK` is return when the requested `VERSION` is successfully retrieved.
    
    + Body

            {
              "_type": "ORIGINAL_VERSION",
              "uid": "OBJECT_VERSION_ID",                  /* _ehr_status_uid_::_system_id_::1 _system_id_ is the ID of the system from which the EHR was created */
              "contribution": {                            /* does not include reference to other versions, even that is mandatory in the IM */
                "uid": "HIER_OBJECT_ID",
                "audit": {
                  "system_id": "String",
                  "time_committed": "DV_DATE_TIME",
                  "description": "String"                  /* optional */
                }
              },
              "signature": "String",                       /* optional */
              "data": {
                "_type": "EHR_STATUS",
                "subject": {
                  "external_ref": {
                    "namespace": "DEMOGRAPHIC",
                    "type": "PERSON",
                    "id": {
                      "_type": "HIER_OBJECT_ID",
                      "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                    }
                  }
                }
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {                         /* optional, ITEM_STRUCTURE, archetypable */
                  "_type": "ITEM_TREE",
                  "items": {
                    ...
                  }
                }
              },
              "commit_audit": {                            /* the time committed attribute is set by the server */
                "system_id": "_a_string_id_",              /* same as the container version.uid.system_id */
                "change_type": {
                  "value": "creation",
                  "terminology_id": {
                    "value": "openehr"
                  },
                  "code_string": "249"
                },
                "description": "optional description"
              },
              "attestations": [
                {
                  "system_id": "String",
                  "time_committed": "DV_DATE_TIME",
                  "description": "String"                  /* optional */
                  "reason": "DV_TEXT",
                  "proof": "String",                       /* optional */
                  "is_pending": "Boolean"
                },
                {...},
                {...}
              ]
            }

+ Response 404

    `404 Not Found` is returned when an `EHR` with `ehr_id` does not exist or `EHR_STATUS` with `version_uid` does not exist.

    + Body
