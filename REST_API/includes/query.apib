## Execute Query [/query]

Release: **_Release_**

### Execute ad-hoc (non-stored) AQL query [GET /query/aql{?q,query_parameter,offset,fetch}]

Warning: URIs in practice have a length restriction. Long AQLs in parameter `q` and many long
`query_parameter`s may add up to reach that limit, thus we recommend using the
`POST /query/aql` instead when such risks are expected.

+ Parameters
    + q (string) - the AQL to be executed
    + offset (number, optional) - row number in result-set to start result-set from (0-based)
    + fetch  (number, optional) - number of rows to fetch
    + `query_parameter` (string, optional) - query parameters

+ Response 200 (application/json)

    + Headers

            ETag: cdbb5db1-e466-4429-a9e5-bf80a54e120b

    + Body

            {
                /* See discussion on result-set in overview */
            }

### Execute ad-hoc (non-stored) AQL query [POST /query/aql]

+ Request (application/json)

    + Body

            {
                "q": "<the query to be executed>",
                "offset": NUMBER_TO_START_FROM,
                "fetch": NUMBER_TO_FETCH,
                "query-parameters": {
                    "parameter-x-name": "parameter-x-value",
                    "parameter-y-name": "parameter-y-value"
                }
            }

+ Response 200 (application/json)

    + Headers

            ETag: cdbb5db1-e466-4429-a9e5-bf80a54e120b

    + Body

            {
                /* See discussion on result-set in overview */
            }


### Execute stored query [GET /query/{qualified_query_name}/{version}{?offset,fetch,query_parameter}]

Execute a stored query with the supplied qualified_query_name. Queries can be stored
via the query definition API endpoint.

All query parameters found except "offset" and "fetch" are sent to the query execution engine.
For parameters in AQL queries, see `http://www.openehr.org/releases/QUERY/latest/docs/AQL/AQL.html#_parameters`.
For example call:

    - GET /query/com.vendor::compositions?temperature_from=36&temperature_unit=Cel

Will pass parameters `temperature_from` and `temperature_unit` to the underlying query.

+ Parameters

    +   `qualified_query_name` (string) - qualified query name to be executed. It may be formatted as
        `<namespace>::<query-name>`, this way we can separate queries by domain, etc.
        Example qualified query name: `org.openehr::compositions`
    +   version (string, optional) - SEMVER style (major.minor.patch) version prefix. If only major or major.minor are used then the latest version with
        supplied prefix will be used.
    +   offset (optional) - Query response row number to start from (default: 0)
    +   fetch (optional) - Number of query response rows to fetch (from offset). For AQL queries: cannot be 
        combined with `http://www.openehr.org/releases/QUERY/latest/docs/AQL/AQL.html#_top`
    +   `query_parameter` (optional) - query parameters (can appear multiple times)

+ Response 200 (application/json)

    + Headers

            ETag: cdbb5db1-e466-4429-a9e5-bf80a54e120b

    + Body

            {
              /* See discussion on result-set in overview */
            }


### Execute stored query [POST /query/{qualified_query_name}/{version}]

Execute a stored query with the supplied qualified_query_name.

The absence of the http header 'ehr_id' means that the stored query or request parameters MAY contain a list of several ehr_ids or be
unconstrained regarding ehr_id (e.g. population queries).

+ Parameters

    +   `qualified_query_name` (string) - qualified query name to be executed. It may be formatted as
        `<namespace>::<query-name>`, this way we can separate queries by domain, etc.
        Example qualified query name: `org.openehr::compositions`
    +   version (string) - SEMVER style (major.minor.patch) version prefix. If only major or major.minor are used then the latest version with
        supplied prefix will be used.

+ Request (application/json)

    + Headers

            If-None-Match: cdbb5db1-e466-4429-a9e5-bf80a54e120b

    + Body

            {
                "offset": NUMBER_TO_START_FROM,
                "fetch": NUMBER_TO_FETCH,
                "query-parameters": {
                    "parameter-x-name": "parameter-x-value",
                    "parameter-y-name": "parameter-y-value"
                }
            }

+ Response 200 (application/json)

    + Headers

            ETag: cdbb5db1-e466-4429-a9e5-bf80a54e120b

    + Body

            {
              /* See discussion on result-set in overview */
            }

